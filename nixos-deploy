#!/usr/bin/env bash

set -e

: ${base_configuration:?Not a standalone script}

die ()
{
  echo "Error: $1" >&2
  exit 2
}

# Args: $config $@
build ()
{
  local config="$1"
  local -a nix_path
  shift
  if [[ -e nixpkgs.nix ]]; then
    echo "Using nixpkgs at './nixpkgs.nix'" >&2
    nixpkgs_path=`nix eval -f ./nixpkgs.nix nixpkgs.path`
    nix_path=(NIX_PATH=nixpkgs=${nixpkgs_path})
  elif [[ -d nixpkgs ]]; then
    echo "Using nixpkgs at './nixpkgs'" >&2
    nix_path=(NIX_PATH=nixpkgs=./nixpkgs)
  fi
  echo "Building $config" >&2
  env "${nix_path[@]}" \
    nix build --show-trace -f "$base_configuration" \
      --arg configuration "import $config" \
      "$@"
}

# Args: system
deploy_local ()
{
  echo "Activating"
  su -c "$1/bin/activate"
}

# Args: target system
deploy_remote ()
{
  local target=$1 path=$2
  if [[ -L $path ]]; then path=`readlink $path`; fi
  if [[ ${USE_SUBSTITUTE-1} -eq 1 ]]; then use_substitute="-s"; else use_substitute=""; fi
  echo "Uploading to $target"
  nix copy --no-check-sigs --to "$target" $use_substitute "$path"
  echo "Activating"
  ssh "$target" -- "NO_CHECK_HOSTNAME=${NO_CHECK_HOSTNAME-0} $path/bin/activate"
}

update_nixpkgs ()
{
  local branch git_url tarball_url
  { read branch; read git_url; read tarball_url; } < <(
    nix eval --raw --impure --expr '(
      ({
         branch,
         git_url ? "https://github.com/nixos/nixpkgs",
         tarball_url ? "https://github.com/nixos/nixpkgs/archive/%REV%.tar.gz",
         ...
       }: "${branch}\n${git_url}\n${tarball_url}\n"
      ) (import ./nixpkgs.nix)
    )'
  )
  local rev sha256
  echo "Fecthing lastest $branch at $git_url"
  read rev _ < <(git ls-remote --refs "$git_url" "$branch")
  local url=${tarball_url/\%REV\%/$rev}
  read sha256 < <(nix-prefetch-url --unpack "$url")
  cat > nixpkgs.json <<EOF
{
  "url": "$url",
  "sha256": "$sha256"
}
EOF
  echo "Updated nixpkgs.json"
}

case "$1" in
  deploy)
    target=${2?"Usage: $0 deploy <target>"}
    config=${3-./configuration.nix}

    case "$target" in
      "local")
        build "$config" --arg check_sshd false system
        nix path-info -Sh ./result
        deploy_local ./result ;;
      *)
        build "$config" --arg check_sshd true system
        nix path-info -Sh ./result
        deploy_remote "$target" ./result;;
    esac ;;

  option)
    option=${2?"Usage: $0 option <option>"}
    config=${3-./configuration.nix}

    nixos-option -I nixos-config="$config" "$2"
    ;;

  vm)
    config=${2-./configuration.nix}

    build "$config" --arg check_sshd false --arg check_hostname false vm
    nix path-info -Sh ./result

    ./result/bin/run-*-vm
    ;;

  build)
    config=${2-./configuration.nix}

    build "$config" --arg check_sshd false -L system
    nix path-info -Sh ./result
    ;;

  update) update_nixpkgs ;;

  *)
    cat <<EOF >&2
Usage: nixos-deploy { deploy | vm | build | update }

  If a directory named 'nixpkgs' exists in the current directory, it is used
  instead of the global nixpkgs channel.

  If a file named 'nixpkgs.nix' exists in the current directory, this
  expression is used to obtain nixpkgs:
      (import ./nixpkgs.nix).nixpkgs

  Most commands take a NixOS configuration as last argument. The default is
  "configuration.nix".

  deploy local [configuration]
    Build and deploy a NixOS system for the current machine.

    Env:
      NO_CHECK_HOSTNAME
        When set to '1', disable the hostname check. Without this, the
        activation script compares the hostname of the current system and exits
        if it is not the same as the new system.

  deploy ssh://<uri> [configuration]
    Build and deploy a NixOS system. <uri> is an SSH uri, eg. root@remote.
    This is a thin wrapper around 'nix build' and 'nix copy'. The system is
    built locally, uploaded to the remote machine then activated (switched to).

    Env:
      USE_SUBSTITUTE    1 or 0, default: 1
        Enable or disable the option "--substitute-on-destination" of 'nix copy'.
      NO_CHECK_HOSTNAME
        Same as for 'deploy local'

  option <option> [configuration]
    Run nixos-option on the system that would be deployed.

  vm [configuration]
    Build a NixOS system and run it inside a qemu VM.

  build [configuration]
    Build a NixOS system with 'nix build -L' for debugging purpose.

  update
    Query the lastest version of a branch of nixpkgs and update 'nixpkgs.json'.
    Read 'nixpkgs.nix', which must be compatible with:
        {
          nixpkgs = import (builtins.fetchTarball
            (builtins.fromJSON (builtins.readFile ./nixpkgs.json)));

          branch = "nixos-21.11";

          # These are the default values and can be omitted.
          git_url = "https://github.com/nixos/nixpkgs";
          tarball_url = "https://github.com/nixos/nixpkgs/archive/%REV%.tar.gz";
        }
EOF
    ;;
esac
