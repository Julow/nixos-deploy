#!/usr/bin/env bash

set -e

# Args: $config $@
build ()
{
  local config="$1"
  local -a nixpkgs
  shift
  if [[ -d nixpkgs ]]; then
    echo "Using nixpkgs at './nixpkgs'" >&2
    nixpkgs=(-I nixpkgs=./nixpkgs)
  fi
  echo "Building $config" >&2
  nix-build --no-out-link '<nixpkgs/nixos>' -I nixos-config="$config" "${nixpkgs[@]}" "$@"
}

# Outputs to stdout a shell script that activates system.
# Args: system
activate_script ()
{
  echo \
"nix-env --profile /nix/var/nix/profiles/system --set '$1' && \
/nix/var/nix/profiles/system/bin/switch-to-configuration switch"
}

# Args: system
deploy_local ()
{
  echo "Activating"
  su -c "$(activate_script "$1")"
}

# Args: target system
deploy_remote ()
{
  if [[ ${USE_SUBSTITUTE-1} -eq 1 ]]; then use_substitute="-s"; else use_substitute=""; fi

  echo "Uploading to $1"
  nix copy --no-check-sigs --to "$1" $use_substitute "$2"

  echo "Activating"
  ssh "$1" -- "$(activate_script "$2")"
}

case "$1" in
  deploy)
    target=${2?"Usage: $0 deploy <target>"}
    config=${3-configuration.nix}

    result=$(build "$config" -A system)
    echo "Built $result"

    case "$target" in
      "local") deploy_local "$result" ;;
      *) deploy_remote "$target" "$result" ;;
    esac
    ;;

  option)
    option=${2?"Usage: $0 option <option>"}
    config=${3-configuration.nix}

    nixos-option -I nixos-config="$config" "$2"
    ;;

  vm)
    config=${2-configuration.nix}

    result=$(build "$config" -A vm)
    echo "Built $result"

    "$result"/bin/run-*-vm
    ;;

  trace)
    config=${2-configuration.nix}

    result=$(build "$config" -A system --show-trace)
    echo "Built $result"
    ;;

  *)
    cat <<EOF >&2
Usage: nixos-deploy { deploy <target> | vm | trace } [configuration.nix]

  If a directory named 'nixpkgs' exists in the current directory, it is used
  instead of the global nixpkgs channel.

  deploy local
    Build and deploy a NixOS system for the current machine.

  deploy ssh://<uri>
    Build and deploy a NixOS system. <uri> is an SSH uri, eg. root@remote.
    This is a thin wrapper around 'nix-build' and 'nix-copy-closure'. The system is
    built locally, uploaded to the remote machine then activated (switched to).

    Env:
      USE_SUBSTITUTE    1 or 0, default: 1
        Enable or disable the option "--substitute-on-destination" of 'nix copy'.

  option <option>
    Run nixos-option on the system that would be deployed.

  vm
    Build a NixOS system and run it inside a qemu VM.

  trace
    Build a NixOS system with 'nix-build --show-trace' for debugging purpose.
EOF
    ;;
esac
