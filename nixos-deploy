#!/usr/bin/env bash

set -e

: ${base_configuration:?Not a standalone script}

die ()
{
  echo "Error: $1" >&2
  exit 2
}

# Args: $config $@
build ()
{
  local config="$1"
  local -a nixpkgs
  shift
  if [[ -d nixpkgs ]]; then
    echo "Using nixpkgs at './nixpkgs'" >&2
    nixpkgs=(-I nixpkgs=./nixpkgs)
  fi
  echo "Building $config" >&2
  nix-build --no-out-link "$base_configuration" --arg configuration "import $config" "${nixpkgs[@]}" "$@"
}

# Args: system
deploy_local ()
{
  echo "Activating"
  su -c "$1/bin/activate"
}

# Args: target system
deploy_remote ()
{
  if [[ ${USE_SUBSTITUTE-1} -eq 1 ]]; then use_substitute="-s"; else use_substitute=""; fi
  echo "Uploading to $1"
  nix copy --no-check-sigs --to "$1" $use_substitute "$2"
  echo "Activating"
  ssh "$1" -- "NO_CHECK_HOSTNAME=${NO_CHECK_HOSTNAME-0} $2/bin/activate"
}

NIXOS_CHANNELS_REPO="https://github.com/NixOS/nixpkgs"
CHANNELS_PATTERN=("refs/heads/nixpkgs-*" "refs/heads/nixos-*")

list_channels ()
{
  echo "Available channels:"
  git ls-remote --heads --refs --sort=-version:refname "$NIXOS_CHANNELS_REPO" "${CHANNELS_PATTERN[@]}" \
    | sed -nE 's#^[^ ]* *refs/heads/([^/]+)$#  \1#;T;p'
}

# Echo a nicely formatted rev with the date
git_rev_date ()
{
  git log -1 --pretty=tformat:"%h%d %cr" HEAD
}

update_nixpkgs ()
{
  if ! [[ -e nixpkgs/.git ]]; then
    die "'nixpkgs' doesn't exist or isn't a Git submodule."
  fi
  (
    cd nixpkgs
    echo "Fetching $1"
    git checkout -q --detach HEAD
    git fetch -f --depth=1 "$NIXOS_CHANNELS_REPO" "$1:$1"
    git checkout -q "$1"
    echo "Updated to $1 `git_rev_date`"
  )
}

case "$1" in
  deploy)
    target=${2?"Usage: $0 deploy <target>"}
    config=${3-./configuration.nix}

    result=$(build "$config" -A system)
    nix path-info -Sh "$result"

    case "$target" in
      "local") deploy_local "$result" ;;
      *) deploy_remote "$target" "$result" ;;
    esac
    ;;

  option)
    option=${2?"Usage: $0 option <option>"}
    config=${3-./configuration.nix}

    nixos-option -I nixos-config="$config" "$2"
    ;;

  vm)
    config=${2-./configuration.nix}

    result=$(build "$config" -A vm)
    nix path-info -Sh "$result"

    "$result"/bin/run-*-vm
    ;;

  build)
    config=${2-./configuration.nix}

    result=$(build "$config" -A system --show-trace)
    nix path-info -Sh "$result"
    ;;

  update)
    ( cd nixpkgs; echo "Current rev: `git_rev_date`" )
    if [[ $# -eq 1 ]]; then
      list_channels
    else
      update_nixpkgs "$2"
    fi
    ;;

  *)
    cat <<EOF >&2
Usage: nixos-deploy { deploy | vm | build | update }

  If a directory named 'nixpkgs' exists in the current directory, it is used
  instead of the global nixpkgs channel.

  Most commands take a NixOS configuration as last argument. The default is
  "configuration.nix".

  deploy local [configuration]
    Build and deploy a NixOS system for the current machine.

    Env:
      NO_CHECK_HOSTNAME
        When set to '1', disable the hostname check. Without this, the
        activation script compares the hostname of the current system and exits
        if it is not the same as the new system.

  deploy ssh://<uri> [configuration]
    Build and deploy a NixOS system. <uri> is an SSH uri, eg. root@remote.
    This is a thin wrapper around 'nix-build' and 'nix-copy-closure'. The system is
    built locally, uploaded to the remote machine then activated (switched to).

    Env:
      USE_SUBSTITUTE    1 or 0, default: 1
        Enable or disable the option "--substitute-on-destination" of 'nix copy'.
      NO_CHECK_HOSTNAME
        Same as for 'deploy local'

  option <option> [configuration]
    Run nixos-option on the system that would be deployed.

  vm [configuration]
    Build a NixOS system and run it inside a qemu VM.

  build [configuration]
    Build a NixOS system with 'nix-build --show-trace' for debugging purpose.

  update [branch]
    When there is a directory named 'nixpkgs' and it is a Git submodule.
    If [branch] is not given, list all available branches. Otherwise, update
    the 'nixpkgs' submodule to the given branch.
    Branches are taken from $NIXOS_CHANNELS_REPO.
EOF
    ;;
esac
